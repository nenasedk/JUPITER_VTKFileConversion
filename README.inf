- This is a simulation of a 5 Mjup planet at 50 AU from its solar-mass star. 4 levels of refinement on the base mesh (5 files total for each hydro field). 

- the output files including the grid file is in output00262.tar.gz

- radmc3d_dens_temp_vel_bin_refined_fast_lev6.pro is the IDL routine which I wrote to read-in the field and to convert it to the RT software's file format. The beginning of the routine shows how to convert the code units into CGS units. For now it is only for density, velocity, time, and temperature but once we should derive it out for the internal energy, and the other output fields. For now, just leave those in code units. 

- In the grid file (Descriptor*.dat), don't forget to cut of 2 cells in each spatial directions from the arrays (from the beginning, and from the end of the arrays), those are ghost cells. The cell numbers written in the Descriptor file are showing only the active cells (yes, it is incosistent with the coordinate arrays, I agree), i.e. 4 cells less. We only care about the active cells, we only plot those. The hydro fields only contain the active cells. 

- The input of your python routine should be: 
1) the planet's distance from the star (in AU)
2) mass of the star (in solar mass units)
3) the output number
4) the number of levels
5) the name of the hydro field, e.g. "gasdensity", or "gastemperature" as the output files are named.
I hope I didn't miss out anything... ;-)

- do not forget, you need to mirror up the disk, only the lower half of the disk is simulated, and we assume symmetry to the midplane (which at radian = 3.14159/2.)

- do not forget that the velocity file contains the 3 velocity components after each other, so if velocity is to be converted with your python routine, then the hydro field array should be 4D, instead of just 3D.

I think your pipeline should have roughly the following order (you can change the order of course as long as it make sense):
1) set the conversion units based on the planet's distance and the mass of the star
2) read in the Descriptor file, it should be as long as the number of levels (input parameter) are indicating. Get out the cell numbers and cell boundary arrays at each level.
3) Create the coordinate arrays and convert the radius into CGS units (multiply with the factor from my IDL routine).
4) Create an empty, 3D array for the hydro field 
5) Read in the hydro field that is a 1D binary array of the size of entire field on a given level.
6) Give these arrays to a python function that writes them out into a binary VTK file, I think the AMR (adaptive mesh refinement) has its on specific VTK file format, but this needs to be checked.

I hope it helps, and just ask a question, if something goes wrong or you need more clarification about something. Always assume that I could have also made a mistake, so count with that human factor too. 















